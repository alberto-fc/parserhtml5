<html>
	<head>
		<style>

#drop_zone {
border: 2px dashed #bbb;
-moz-border-radius: 5px;
-webkit-border-radius: 5px;
border-radius: 5px;
padding: 25px;
text-align: center;
font: 20pt bold 'Vollkorn';
color: #bbb;
} 
</style>
<script src='download.js'></script>
	</head>
<body>
<div id="drop_zone">Drop files here</div>
<output id="list"></output>

<div id="outputURL"></div>
<input type="text" id="userLame"></input>
<input type="password" id="passLame"></input>



<script>
	var outputURL = document.getElementById("outputURL");
	var get = function(id) { return document.getElementById(id); }
	console.log("HOLA");
  function handleFileSelect(evt) {
    evt.stopPropagation();
    evt.preventDefault();

    var files = evt.dataTransfer.files; // FileList object.
    var reader = new FileReader();
    
    // If we use onloadend, we need to check the readyState.
    reader.onload = function(file) 
    {
    	var outputText = [];
    	
    	var content = file.target.result;
    	var rows = file.target.result.split(/[\r\n|\n]+/);
    	var str = file.target.result;
    	var user = document.getElementById("userLame").value;
    	var pass = document.getElementById("passLame").value;
    	
    	/*for (var i = 0; i < rows.length; i++)
    	{
    		//console.log(rows[i]);
    		outputText.push(rows[i]);
    	}*/
    	
    	var domainIndex = str.indexOf('http://') + 7;
    	console.log(domainIndex);
    	var domainStr = str.substring(domainIndex, (domainIndex) + 10);
    	console.log(domainStr);
    	var strToReplace = 'http://' + domainStr + ':9981'
    	console.log(strToReplace);
    	var regReplace = new RegExp(strToReplace, "g");

    	var res = str.replace(regReplace, "https://" + user + ":" + pass + "@" + domainStr);
    	console.log(res);
    	console.log("TERMINE");
    	console.log(user);
    	//var blob = new Blob([outputText], {type: 'application/text'});
    	//var url = URL.createObjectURL(blob);
    	//outputURL.innerHTML = '<a href="'+url+'">Output File</a>';
    	
    	download(res, "channels.m3u", "text/plain");
    };
    
    /*reader.onloadend = function(file) 
    {
    	var blob = new Blob([json], {type: 'application/json'});
	    var url = URL.createObjectURL(blob);
	    output.innerHTML = '<a href="'+url+'">JSON file</a>';
    }*/
    
    // files is a FileList of File objects. List some properties.
    var output = [];
    for (var i = 0, f; f = files[i]; i++)
    {
      output.push('<li><strong>', escape(f.name), '</strong> (', f.type || 'n/a', ') - ',
                  f.size, ' bytes, lasta modified: ',
                  f.lastModifiedDate.toLocaleDateString(), '</li>');
      reader.readAsText(f);
    }
    document.getElementById('list').innerHTML = '<ul>' + output.join('') + '</ul>';
  }

  function handleDragOver(evt) {
    evt.stopPropagation();
    evt.preventDefault();
    evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
  }
  

  // Setup the dnd listeners.
  var dropZone = document.getElementById('drop_zone');
  dropZone.addEventListener('dragover', handleDragOver, false);
  dropZone.addEventListener('drop', handleFileSelect, false);

</script>
</body>
</html>